# ================ LABELS
# Labels on which the network has been trained
labels_net: mscoco_label_map.json

# Labels to be used as output --> labels_net is remapped to labels_out
labels_out: zauron_label_map.json


# ================ DIRECTORIES
# The directory where the dataset files are stored as absolute path
dataset_dir: /media/sdc/andya/wormhole_learning/converted_rosbags_np

# Filter keywords that needs to be contained in the path
filter_keywords: ["day"]

# Name of the sub-directory containing images of the main sensor
main_sensor: RGB

# Name of the sub-directory containing images of the auxiliary sensor
aux_sensor: EVENTS

# Name of the output dataset *.tfrecord
tfrecord_name_prefix: ZURICH_TESTING_DAY_LF2_V3_events

# Output directory for saving the *.tfrecord
output_dir: /media/sdc/andya/wormhole_learning/dataset


# ================ GPUS MASK
# Passes argument to cuda visible devices, comma separated values
cuda_visible_devices: "7"


# ================ SEMI-SUPERVISED LABEL GENERATOR
# Passes argument to cuda visible devices, comma separated values
net_arch: 2

# Retrieval Threshold of the Detector used in generating the labels
retrieval_thresh: 0.5


# ================ PREPROCESSING
# Whether or not to normalize the images in the dataset to zero mean and unit variance
normalize: False

# Whether or not to normalize per single image or with stats from the whole dataset
per_image_normalization: True

# Determines the confidence interval for the image values, e.g. 3.0 leads to 99.7%
# of the values being kept for the scaling back procedure
confidence_interval: 3.0

# Whether or not to scale back images using cv2.normalize() method which will
# discard image mean and variance values. Otherwise normalized images are scaled
# back to range 0 to 255 using mean 127 and stddev derived from confidence_int
scale_back_using_cv2: False


# ================ LEARNING FILTER
# Multimodal Observer mode. Use 'rgb' if you are feeding normal images and want to calculate
# the observability score through the shannon entropy or use 'events' if you want to use
# proprietary observability calculation specifically for event-based frames or
# use 'events_np' if your event frame is black/white with no polarity
lf_mode: events_np

# Min Object perimeter needed for learning filter. Set to 0 to turn it off
min_obj_size: 40

# Min Learning Filter Observability Score. Objects below will be discarded
# or flagged as difficult. Set to 0 to disable the learning filter
lf_score_thresh: 10

# ROI of bboxes that shall be removed. Set to None to turn it off. Same tuple structure as bbox
remove_roi: [0.60, 0.00, 1.00, 1.00]

# Shape of bboxes that shall be removed. Takes a tuple of height and width in normalized coords.
# Set to None to not check the shape
remove_shape: [0.33, 0.90]
                     

# ================ VISUALIZATION AND PLOTS
# Activates verbose mode with visualisation and sets the mode for verbose
# Currently implemented are 'plot', 'cv2' and 'export'
verbose: "export"

# Generates and saves plots on the home folder
generate_plots: True

# Wether or not to show generated plots. Put false if running through SSH
show_plots: False
